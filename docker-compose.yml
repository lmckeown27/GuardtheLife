version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: lifeguard_postgres
    environment:
      POSTGRES_DB: lifeguard_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init:/docker-entrypoint-initdb.d
    networks:
      - lifeguard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: lifeguard_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lifeguard_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lifeguard_backend
    environment:
      NODE_ENV: development
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: lifeguard_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lifeguard_network
    command: npm run dev

  # Frontend React Native Metro bundler
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lifeguard_frontend
    environment:
      NODE_ENV: development
      API_BASE_URL: http://localhost:3000
    ports:
      - "8081:8081"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - lifeguard_network
    command: npm start

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lifeguard_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lifeguard.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - lifeguard_network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  lifeguard_network:
    driver: bridge 